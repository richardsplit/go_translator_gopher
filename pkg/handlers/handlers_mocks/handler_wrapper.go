// Code generated by MockGen. DO NOT EDIT.
// Source: handler_wrapper.go

// Package handlers_mocks is a generated GoMock package.
package handlers_mocks

import (
	gomock "github.com/golang/mock/gomock"
	handlers "github.com/richardsplit/go_translator_gopher/pkg/handlers"
	server "github.com/richardsplit/go_translator_gopher/pkg/server"
	reflect "reflect"
)

// MockTranslator is a mock of Translator interface
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// TranslateWord mocks base method
func (m *MockTranslator) TranslateWord(original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateWord", original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateWord indicates an expected call of TranslateWord
func (mr *MockTranslatorMockRecorder) TranslateWord(original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateWord", reflect.TypeOf((*MockTranslator)(nil).TranslateWord), original)
}

// TranslateSentence mocks base method
func (m *MockTranslator) TranslateSentence(original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateSentence", original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateSentence indicates an expected call of TranslateSentence
func (mr *MockTranslatorMockRecorder) TranslateSentence(original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateSentence", reflect.TypeOf((*MockTranslator)(nil).TranslateSentence), original)
}

// MockDefaultTranslatorHandler is a mock of DefaultTranslatorHandler interface
type MockDefaultTranslatorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultTranslatorHandlerMockRecorder
}

// MockDefaultTranslatorHandlerMockRecorder is the mock recorder for MockDefaultTranslatorHandler
type MockDefaultTranslatorHandlerMockRecorder struct {
	mock *MockDefaultTranslatorHandler
}

// NewMockDefaultTranslatorHandler creates a new mock instance
func NewMockDefaultTranslatorHandler(ctrl *gomock.Controller) *MockDefaultTranslatorHandler {
	mock := &MockDefaultTranslatorHandler{ctrl: ctrl}
	mock.recorder = &MockDefaultTranslatorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefaultTranslatorHandler) EXPECT() *MockDefaultTranslatorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockDefaultTranslatorHandler) Handle(response server.Response, request server.Request, translator handlers.Translator, history handlers.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", response, request, translator, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockDefaultTranslatorHandlerMockRecorder) Handle(response, request, translator, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDefaultTranslatorHandler)(nil).Handle), response, request, translator, history)
}

// MockDefaultHandler is a mock of DefaultHandler interface
type MockDefaultHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultHandlerMockRecorder
}

// MockDefaultHandlerMockRecorder is the mock recorder for MockDefaultHandler
type MockDefaultHandlerMockRecorder struct {
	mock *MockDefaultHandler
}

// NewMockDefaultHandler creates a new mock instance
func NewMockDefaultHandler(ctrl *gomock.Controller) *MockDefaultHandler {
	mock := &MockDefaultHandler{ctrl: ctrl}
	mock.recorder = &MockDefaultHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefaultHandler) EXPECT() *MockDefaultHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockDefaultHandler) Handle(response server.Response, request server.Request, history handlers.History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", response, request, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockDefaultHandlerMockRecorder) Handle(response, request, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDefaultHandler)(nil).Handle), response, request, history)
}

// MockHistory is a mock of History interface
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockHistory) Add(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add
func (mr *MockHistoryMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHistory)(nil).Add), key, value)
}

// GetArranged mocks base method
func (m *MockHistory) GetArranged() []map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArranged")
	ret0, _ := ret[0].([]map[string]string)
	return ret0
}

// GetArranged indicates an expected call of GetArranged
func (mr *MockHistoryMockRecorder) GetArranged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArranged", reflect.TypeOf((*MockHistory)(nil).GetArranged))
}
